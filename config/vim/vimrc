let mapleader =" "

" ==================================
" Plugins
" ==================================

call plug#begin('~/.vim/plugged')
	" File Explorer
    Plug 'scrooloose/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
    Plug 'ryanoasis/vim-devicons'

    map <silent> <C-n> :NERDTreeToggle<CR>
    map <silent> <leader>n :NERDTreeFind<CR>

	" Colors
    Plug 'kyazdani42/palenight.vim'

    "the lightline at the bottom
    Plug 'itchyny/lightline.vim'

    " Comments
    Plug 'tomtom/tcomment_vim'
    " Ctrl + / is outputing ++ (term configuration)
    nmap <silent> ++ :TComment<CR>
    vmap <silent> ++ :TComment<CR>

    " Fuzzyfinder for vim
    Plug 'junegunn/fzf.vim'


    " Hilight when yanking
    Plug 'machakann/vim-highlightedyank'
    let g:highlightedyank_highlight_duration = 300

    " Change/delete surrounding char
    Plug 'tpope/vim-surround'

    " Changes vim workdir to project root
    Plug 'airblade/vim-rooter'

    " Git informations in the gutter
    Plug 'airblade/vim-gitgutter'

    " color syntax for most languages
    Plug 'sheerun/vim-polyglot'

    "CoC
    Plug 'neoclide/coc.nvim', { 'tag': '*', 'branch': 'release' }
call plug#end()

filetype plugin indent on

let g:lightline = {
      \ 'colorscheme': 'palenight',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste', 'gitbranch' ],
      \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction',
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
function! CocCurrentFunction()
  return get(b:, 'coc_current_function', '')
endfunction

colorscheme palenight
set termguicolors
set t_Co=256
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set background=dark
let g:palenight_terminal_italics=1
syntax on " Syntax highlighting
" some color overriding the colorscheme
hi Pmenu guibg=#343f58 guifg=#e7edf9
hi PmenuSel guibg=#1c1f2b guifg=#80cbc4
hi PmenuSbar guibg=#3a3d51
hi PmenuThumb guibg=#2e3140
hi CursorLine guibg=#1c1f2b
hi LineNr guifg=#3a3f58
hi Visual guibg=#343a51
hi VisualNOS guibg=#343a51
hi Search guibg=#4c4b65 guifg=default
hi IncSearch guibg=#4c4b65 guifg=default
hi MatchParen gui=bold,underline guifg=#a77eca guibg=default
set fillchars+=vert:\â”‚
set guicursor+=a:blinkon100

" ==========================
" Settings
" ==========================

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o " disable autocommenting on newline

" undo files
" use ~/.cache/vim/ as default data directory, create the directory if it does not exist.
set backup
set undofile
set undolevels=1000
let g:data_dir = $HOME . '/.cache/vim/'
let g:backup_dir = g:data_dir . 'backup'
let g:swap_dir = g:data_dir . 'swap'
let g:undo_dir = g:data_dir . 'undofile'
let g:conf_dir = g:data_dir . 'conf'
if finddir(g:data_dir) ==# ''
  silent call mkdir(g:data_dir, 'p', 0700)
endif
if finddir(g:backup_dir) ==# ''
  silent call mkdir(g:backup_dir, 'p', 0700)
endif
if finddir(g:swap_dir) ==# ''
  silent call mkdir(g:swap_dir, 'p', 0700)
endif
if finddir(g:undo_dir) ==# ''
  silent call mkdir(g:undo_dir, 'p', 0700)
endif
if finddir(g:conf_dir) ==# ''
  silent call mkdir(g:conf_dir, 'p', 0700)
endif
unlet g:data_dir
unlet g:backup_dir
unlet g:swap_dir
unlet g:undo_dir
unlet g:conf_dir
set undodir=$HOME/.cache/vim/undofile
set backupdir=$HOME/.cache/vim/backup
set directory=$HOME/.cache/vim/swap

set relativenumber " Relative numbers
set showmatch " Show matching brackets/parenthesis
set cursorline " Highlight current line
set noshowmode
set mousehide " hide mouse while typing
set linebreak " do not break words
set splitbelow splitright " Splits open on the bottom or on the right
set ruler " Show line and column number of cursor pos
set laststatus=2 " Use StatusBar on all windows, 2 = always
set scrolloff=9999 " Make cursor in middle of screen ?

" Indentation
set smartindent " auto indent on new line (brackets for instance)
set tabstop=4 " Tabs are 4 spaces long
set shiftwidth=4 " Number of space for autoindent
set expandtab " Use Spaces
" {java/type}script is indenting with 2 spaces
autocmd FileType typescript,javascript set tabstop=2 shiftwidth=2
" jsx and tsx files are {java/type}script
autocmd BufNewFile,BufRead *.tsx set syntax=typescript
autocmd BufNewFile,BufRead *.jsx set syntax=javascript

" Search settings
set noincsearch " Do not move cursor during search
set ignorecase " Ignore case
set hlsearch " Highlight search results

" Misc
set autoread " reload file when it changes
set confirm " disable 'no write'
set mouse=n " enable mouse
set backspace=indent,eol,start " Easy backspace
set encoding=utf-8 " displayed encoding
set fileencoding=utf-8 " written to file encoding
set nocompatible " Disable vi compatibility
set wildmode=longest,list,full " Command line completion mode
" Disable Ex mode
nnoremap Q <Nop>

" control j to escape
map <C-j> <Nop>
inoremap <C-j> <Esc>
noremap <C-j> <Esc>

"toggle buffer
nnoremap <leader><leader> <c-^>

" Oups
map <F1> <Esc>
imap <F1> <Esc>

map H ^
map L $

map <silent> <leader>b :Buffers<CR>
map <silent> <leader>f :Rg<CR>
nnoremap <silent> <leader>p :Files<CR>

let g:fzf_nvim_statusline = 0 " disable statusline overwriting
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noruler nornu 
      \| autocmd BufLeave <buffer> set laststatus=2 ruler relativenumber

let g:fzf_layout = { 'down': '~25%' }
let g:fzf_colors = {
      \ 'bg': ['bg', 'CursorLine'],
      \ 'spinner': ['bg', 'CursorLine'],
      \ 'info': ['bg', 'CursorLine'],
      \ 'gutter': ['bg', 'CursorLine'],
      \ 'prompt': ['bg', 'CursorLine'],
      \ 'pointer': ['bg', 'CursorLine'],
      \ 'bg+':     ['bg', 'CursorLine'],
      \ }

set cmdheight=2 " Better display for messages
set updatetime=300 " launch cursor hold (in ms, for diagnostic message mostly)
" Use <c-space> to trigger completion.
inoremap <silent><expr> ;; coc#refresh()
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> E <Plug>(coc-diagnostic-prev)
nmap <silent> W <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use control K to show documentation in preview window
nnoremap <silent> <C-k> :call <SID>show_documentation()<CR>
nmap <silent> <C-I> :Format<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'vert h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" Remap for rename current word
nmap rn <Plug>(coc-rename)
command! -nargs=0 Format :call CocAction('format')
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" vim: set et sw=2 foldlevel=0 foldmethod=marker:
