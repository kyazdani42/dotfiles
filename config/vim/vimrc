" My   "
" Vim  "
" Rc   "
" File "

let mapleader =" "

call plug#begin('~/.vim/plugged')
	"centers the text and gets rid of everything else (zen mode like)
	Plug 'junegunn/goyo.vim'

	"might just be explicit
	Plug 'PotatoesMaster/i3-vim-syntax'

	"the file directory
	Plug 'scrooloose/nerdtree'

	"comment plugin with ctrl + / (2 times)
	Plug 'tomtom/tcomment_vim'

	"the colorscheme
	Plug 'drewtempelmeyer/palenight.vim'

	"asynchronous lint engine
	Plug 'w0rp/ale'

	"the lightline at the bottom
	Plug 'itchyny/lightline.vim'

	"change/delete surrounding char
	Plug 'tpope/vim-surround'

	"changes vim workdir to project root
	Plug 'airblade/vim-rooter'
	"fuzzyfinder for vim
	Plug 'junegunn/fzf.vim'

	"hilight when yanking
	Plug 'machakann/vim-highlightedyank'

	"completion !
	Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

call plug#end()

set background=dark
colorscheme palenight

let g:lightline = {
	\'colorscheme': 'palenight',
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ], [ 'cocstatus', 'readonly', 'filename', 'modified' ] ],
	\ },
	\ 'component_function': {
	\   'cocstatus': 'coc#status'
	\ },
	\}

if (has("nvim"))
	let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if (has("termguicolors"))
	set termguicolors
endif

if !has('gui_running')
	set t_Co=256
endif

" bg transparent
"hi Normal ctermbg=none guibg=NONE

syntax on
set number relativenumber
set ruler
set cursorline

"Activate indentation
filetype off
"Disable vi-compatibility
set nocompatible
set encoding=utf-8
set wildmode=longest,list,full
filetype plugin indent on
set smartindent
"Non-expanded, 4-wide tabulations
set tabstop=4
set shiftwidth=4
set noexpandtab
"Don't bother throttling tty
set ttyfast
"More useful backspace behavior
set backspace=indent,eol,start
"Use statusbar on all windows
set laststatus=2
"Better search
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
"
" Automatically deletes all trailing whitespace on save.
autocmd BufWritePre * %s/\s\+$//e
" Run xrdb whenever Xdefaults or Xresources are updated.
autocmd BufWritePost ~/.Xresources,~/.Xdefaults !xrdb %

" disable autocommenting on newline
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" goyo plugin to read text better
map <leader>f :Goyo \| set linebreak<CR>
"nerd tree
map <C-n> :NERDTreeToggle<CR>

" Splits open at the bottom and right, which is non-retarded, unlike vim defaults.
set splitbelow splitright

"disable arrow keys
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <Up> <Nop>
noremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>

"map control hjkl to move between windows (no need for w)
noremap <C-h> <C-W>h
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-l> <C-W>l

"fzf config
map <C-g> :GFiles<CR>
map <C-p> :Files<CR>
map <leader>p :Rg<CR>

let g:highlightedyank_highlight_duration = 300

"coc completion
" if hidden is not set, TextEdit might fail.
set hidden

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

