let mapleader =" "

" ==================================
" Plugins
" ==================================

call plug#begin('~/.vim/plugged')
	"the file directory
	Plug 'scrooloose/nerdtree'

	"comment plugin with ctrl + / (2 times)
	Plug 'tomtom/tcomment_vim'

	"the colorscheme
	Plug 'drewtempelmeyer/palenight.vim'

	"the lightline at the bottom
	Plug 'itchyny/lightline.vim'

	"change/delete surrounding char
	Plug 'tpope/vim-surround'

	"changes vim workdir to project root
	Plug 'airblade/vim-rooter'
	"fuzzyfinder for vim
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	Plug 'junegunn/fzf.vim'

	"hilight when yanking
	Plug 'machakann/vim-highlightedyank'

    " TODO: configure these next three to match my needs

	"asynchronous lint engine
	Plug 'dense-analysis/ale'

    Plug 'sheerun/vim-polyglot'

    "CoC
    Plug 'neoclide/coc.nvim', { 'tag': '*', 'branch': 'release' }

    "git integration
    Plug 'tpope/vim-fugitive'

call plug#end()

" Color stuff
set background=dark
colorscheme palenight
syntax on " Syntax highlighting
"tooltip menu colors
hi Pmenu guibg=#282944 guifg=#878ca9
hi PmenuSel guibg=#1c1f2b guifg=#80cbc4
hi PmenuSbar guibg=#3a3d51
hi PmenuThumb guibg=#2e3140

if (has("nvim"))
	let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

let g:lightline = { 'colorscheme': 'palenight' }

if (has("termguicolors"))
	set termguicolors
endif
if !has('gui_running')
	set t_Co=256
endif

" ==========================
" Settings
" ==========================

"autoclose tags on scripting files
autocmd Filetype html,xml,xsl,php source ~/.vim/plugins/closetag/plugin/closetag.vim

" Mouse support
set mouse=a " enable mouse
set mousehide " hide mouse while typing

" Stuff
set autoread " reload file when it changes
set confirm " disable 'no write'
set showmatch "Show matching brackets/parenthesis
set number relativenumber "Relative numbers
set cursorline " Highlight current line
set backspace=indent,eol,start "Easy backspace
set splitbelow splitright " Splits open at the bottom and right
set clipboard=unnamed "Use system clipboard
set ruler " Show line and column number of cursor pos
autocmd BufWritePre * %s/\s\+$//e " Automatically deletes all trailing whitespace on save.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o " disable autocommenting on newline

" Encoding
set encoding=utf-8 " displayed encoding
set fileencoding=utf-8 " written to file encoding

"Disable vi-compatibility
set nocompatible
set ttyfast
set wildmode=longest,list,full

" Indentation
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
filetype plugin indent on
autocmd FileType typescript,javascript set tabstop=2 shiftwidth=2

" Use statusbar on all windows
set laststatus=2
set scrolloff=9999

" Search settings
set smartcase
set incsearch
set hlsearch
set ignorecase

" ==================================
" mappings
" ==================================

map <C-n> :NERDTreeToggle<CR>

" Disable Ex mode
nnoremap Q <Nop>

" control j to escape
map <C-j> <Nop>
inoremap <C-j> <Esc>
noremap <C-j> <Esc>

map <leader>w :w<CR>
map <leader>x :x<CR>

vmap <Leader>y "+y

"toggle buffer
nnoremap <leader><leader> <c-^>

" Oups
map <F1> <Esc>
imap <F1> <Esc>

map H ^
map L $

map <silent>gd :ALEGoToDefinition<CR>

" M to make
noremap M :!make<cr>

"fzf config
map <leader>b :Buffers<CR>
map <leader>p :Files<CR>
map <leader>r :Rg<CR>
map <leader>f :GFiles<CR>

" =====================
" Plugin configuration
" =====================

" Highlighted yank
let g:highlightedyank_highlight_duration = 300

" Ale
let g:ale_c_parse_makefile = 1
let g:ale_linters = { 'c': ['gcc'], 'rust': ['rls', 'cargo'] }

" Fzf
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_colors =
        \ { 'fg':      ['fg', 'Normal'],
        \   'bg':      ['bg', 'Normal'],
        \   'hl':      ['fg', 'Comment'],
        \   'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
        \   'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
        \   'hl+':     ['fg', 'Statement'],
        \   'info':    ['fg', 'PreProc'],
        \   'border':  ['fg', 'Ignore'],
        \   'prompt':  ['fg', 'Conditional'],
        \   'pointer': ['fg', 'Exception'],
        \   'marker':  ['fg', 'Keyword'],
        \   'spinner': ['fg', 'Label'],
        \   'header':  ['fg', 'Comment'] }

" Coc
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" " Use `[g` and `]g` to navigate diagnostics
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
"
" " Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation
nmap <silent> gr <Plug>(coc-references)
"
" Use control K to show documentation in preview window
nnoremap <silent> <C-k> :call <SID>show_documentation()<CR>

function! s:show_documentation()
if (index(['vim','help'], &filetype) >= 0)
execute 'h '.expand('<cword>')
else
call CocAction('doHover')
endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" " Remap for rename current word
nmap <F2> <Plug>(coc-rename)

augroup mygroup
autocmd!
" Setup formatexpr specified filetype(s).
autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
" Update signature help on jump placeholder
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"
" " Using CocList
" " Show all diagnostics
" nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" " Show commands
" nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document
" nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list
" nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
