let mapleader =" "

" ==================================
" Plugins
" ==================================

call plug#begin('~/.vim/plugged')
	"the file directory
    Plug 'scrooloose/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'

    "comment plugin with ctrl + / (2 times)
    Plug 'tomtom/tcomment_vim'

	"the colorscheme
    Plug 'drewtempelmeyer/palenight.vim'

    "the lightline at the bottom
    Plug 'itchyny/lightline.vim'

    "change/delete surrounding char
    Plug 'tpope/vim-surround'

    "changes vim workdir to project root
    Plug 'airblade/vim-rooter'
    "fuzzyfinder for vim
    Plug 'junegunn/fzf.vim'

    "hilight when yanking
    Plug 'machakann/vim-highlightedyank'

    " color syntax for most languages
    Plug 'sheerun/vim-polyglot'

    "CoC
    Plug 'neoclide/coc.nvim', { 'tag': '*', 'branch': 'release' }

    "git integration
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter'

call plug#end()

" Color stuff
set background=dark
colorscheme palenight
syntax on " Syntax highlighting
"tooltip menu colors
hi Pmenu guibg=#343f58 guifg=#e7edf9
hi PmenuSel guibg=#1c1f2b guifg=#80cbc4
hi PmenuSbar guibg=#3a3d51
hi PmenuThumb guibg=#2e3140

if (has("nvim"))
	let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
      \ 'colorscheme': 'palenight',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste', 'gitbranch' ],
      \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction',
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }

if (has("termguicolors"))
	set termguicolors
endif
if !has('gui_running')
	set t_Co=256
endif

" ==========================
" Settings
" ==========================

"autoclose tags on scripting files
autocmd Filetype html,xml,xsl,php source ~/.vim/scripts/closetag/plugin/closetag.vim

set noshowmode
" Mouse support
set mouse=n " enable mouse
set mousehide " hide mouse while typing

" Stuff
set autoread " reload file when it changes
set confirm " disable 'no write'
set showmatch "Show matching brackets/parenthesis
set number relativenumber "Relative numbers
set cursorline " Highlight current line
set backspace=indent,eol,start "Easy backspace
set splitbelow splitright " Splits open at the bottom and right
set clipboard=unnamed "Use system clipboard
set ruler " Show line and column number of cursor pos
autocmd BufWritePre * %s/\s\+$//e " Automatically deletes all trailing whitespace on save.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o " disable autocommenting on newline

" Encoding
set encoding=utf-8 " displayed encoding
set fileencoding=utf-8 " written to file encoding

"Disable vi-compatibility
set nocompatible
set ttyfast
set wildmode=longest,list,full

" Indentation
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
filetype plugin indent on

autocmd BufNewFile,BufRead *.tsx set syntax=typescript tabstop=2 shiftwidth=2
autocmd BufNewFile,BufRead *.jsx set syntax=javascript tabstop=2 shiftwidth=2
autocmd FileType typescript,javascript set tabstop=2 shiftwidth=2

" Use statusbar on all windows
set laststatus=2
set scrolloff=9999

" Search settings
set smartcase
set incsearch
set hlsearch
set ignorecase

" ==================================
" mappings
" ==================================

map <silent> <C-n> :NERDTreeToggle<CR>
map <silent> <leader>n :NERDTreeFind<CR>

" Disable Ex mode
nnoremap Q <Nop>

" control j to escape
map <C-j> <Nop>
inoremap <C-j> <Esc>
noremap <C-j> <Esc>

map <leader>w :w<CR>
map <leader>x :x<CR>

vmap <Leader>y "+y

"toggle buffer
nnoremap <leader><leader> <c-^>

" Oups
map <F1> <Esc>
imap <F1> <Esc>

map H ^
map L $

"fzf config
map <silent> <leader>b :Buffers<CR>
map <silent> <leader>r :Rg<CR>
nnoremap <silent> <leader>p :call fzf#vim#files('.', {'options': '--prompt ""'})<CR>

" =====================
" Plugin configuration
" =====================

" --- Highlighted yank --- "
let g:highlightedyank_highlight_duration = 300

" --- Fzf --- "
let g:fzf_layout = { 'down': '~25%' }
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" --- Coc --- "

" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" Use <c-.> to trigger completion.
inoremap <silent><expr> <c-.> coc#refresh()
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"
" " Remap keys for gotos
nmap <silent> E <Plug>(coc-diagnostic-prev)
nmap <silent> W <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use control K to show documentation in preview window
nnoremap <silent> <C-k> :call <SID>show_documentation()<CR>
nmap <silent> <C-I> :Format<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" " Remap for rename current word
nmap rn <Plug>(coc-rename)
" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

